%link{rel: 'stylesheet', href: 'http://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.css'}
%link{rel: 'stylesheet', href: 'https://cdnjs.cloudflare.com/ajax/libs/c3/0.4.10/c3.min.css'}
%script{src: 'http://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.js'}
%script{src: 'https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.16/d3.min.js'}
%script{src: 'https://cdnjs.cloudflare.com/ajax/libs/c3/0.4.10/c3.min.js'}
%h1 Run #{@run.id} at #{@run.created_at}

-# TODO:
-#  Add histogram graph of data (JSFiddle with http://bl.ocks.org/mbostock/3048450 using actual histogram data until it's good, then copy into this page.)
-#  Link to export the CSV of placements for a run
-#  Link to mark as selected?
-#  Link to mark as emails-sent, set expiration?

%h2 Statistics

%table
  %tr
    %td Matched nearby
    %td= @run.statistics['matched_nearby']
  %tr
    %td Matched with interest
    %td
      = @run.statistics['matched_with_interest']
  %tr
    %td Placement Rate
    %td
      = succeed '%' do
        = (@run.statistics['placement_rate'] * 100.0).round(1)
  %tr
    %td Average Travel Time
    %td
      = (@run.statistics['average_travel_time'] / 60).round(1)
      minutes

%h3 Travel Times

#chart

%h3 Map Data
#map{style: 'width: 1200px; height: 800px;'}

:javascript

  var chart = c3.generate({
    bindto: '#chart',
    data: {
        xs: { 'data1': 'x1', 'data2': 'x2', },
        columns: [
          ['x1', 5, 10, 15, 20, 25, 30, 35, 40],
          ['x2', 0],
          ['data1', 66, 100, 61, 26, 21, 30, 11, 14],
          ['data2', 0]
        ],
        type: 'bar'
    },
    bar: { width: { ratio: 2 } }
  });


  var map = L.map('map').setView([42.328985,-71.0753532], 13);
  const ATTRIBUTION = 'Map tiles by <a href="http://mapc.org">MAPC</a>, ' +
                  'Data by <a href="http://www.mass.gov/mgis/">MassGIS</a>.';

  L.tileLayer('http://tiles.mapc.org/basemap/{z}/{x}/{y}.png', {
    minZoom: 9,
    maxZoom: 17,
    attribution: ATTRIBUTION
  }).addTo(map);

  var data = #{@run.statistics['geojson'].to_json}

  var colors = {
    applicant: { placed: "#22FF90", unplaced: "#FF7800" },
    position:  { placed: "#2290FF" }
  }

  function getColor(feature) {
    if (feature.properties.type == "position") {
      return colors.position.placed;
    } else {
      if (feature.properties.placed) {
        return colors.applicant.placed;
      } else {
        return colors.applicant.unplaced;
      }
    }
  }

  function getRadius(feature) {
    if (feature.properties.placed) {
      return 5;
    } else {
      return 7;
    }
  }

  function getOpacity(feature) {
    if (feature.properties.placed) {
      return 0.5;
    } else {
      return 0.8;
    }
  }

  var circle = function (feature) {
    var radius  = getRadius(feature)
      , opacity = getOpacity(feature)
      , color   = getColor(feature);
    return { radius: radius, fillColor: color, opacity: 0,
      fillOpacity: opacity }
  };

  function scoreWeight(score) {
    var x = score;
    return (0.225 * x) + 2.75;
  }

  var geojson = L.geoJson(data, {
    pointToLayer: function (feature, latlng) {
      return L.circleMarker(latlng, circle(feature));
    },
    onEachFeature: function (feature, layer) {
      layer.bindPopup(feature.properties);
    },
    style: function (feature) {
      if (feature.geometry.type == "LineString") {
        return {
          color: '#999999',
          weight: scoreWeight(feature.properties.score.total),
          opacity: 1
        };
      }
    }
  }).addTo(map);

  map.fitBounds(geojson.getBounds());

  var legend = L.control({position: 'bottomleft'});

  legend.onAdd = function (map) {

    var div = L.DomUtil.create('div', 'info legend'),
        grades = [
          {name: "placed applicant", properties: {type: 'applicant', placed: true}},
          {name: "unplaced applicant", properties: {type: 'applicant', placed: false}},
          {name: "placed position", properties: {type: 'position', placed: true}},
        ];

    // loop through our density intervals and generate a label with a colored square for each interval
    for (var i = 0; i < grades.length; i++) {
      div.innerHTML += '<div style="background: ' + getColor(grades[i]) + '; width: 10px; height: 10px; float: left; margin-top: 5px;"></div>&nbsp; ' + grades[i].name + '<br>';
    }
    return div;
  };

  legend.addTo(map);
